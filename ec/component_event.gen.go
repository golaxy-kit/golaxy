/*
 * This file is part of Golaxy Distributed Service Development Framework.
 *
 * Golaxy Distributed Service Development Framework is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * Golaxy Distributed Service Development Framework is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Golaxy Distributed Service Development Framework. If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright (c) 2024 pangdogs.
 */

// Code generated by eventc event; DO NOT EDIT.

package ec

import (
	event "git.golaxy.org/core/event"
)

type iAutoEventComponentEnableChanged interface {
	EventComponentEnableChanged() event.IEvent
}

func BindEventComponentEnableChanged(auto iAutoEventComponentEnableChanged, subscriber EventComponentEnableChanged, priority ...int32) event.Hook {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	return event.Bind[EventComponentEnableChanged](auto.EventComponentEnableChanged(), subscriber, priority...)
}

func _EmitEventComponentEnableChanged(auto iAutoEventComponentEnableChanged, comp Component, enable bool) {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(auto.EventComponentEnableChanged()).Emit(func(subscriber event.Cache) bool {
		event.Cache2Iface[EventComponentEnableChanged](subscriber).OnComponentEnableChanged(comp, enable)
		return true
	})
}

func _EmitEventComponentEnableChangedWithInterrupt(auto iAutoEventComponentEnableChanged, interrupt func(comp Component, enable bool) bool, comp Component, enable bool) {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(auto.EventComponentEnableChanged()).Emit(func(subscriber event.Cache) bool {
		if interrupt != nil {
			if interrupt(comp, enable) {
				return false
			}
		}
		event.Cache2Iface[EventComponentEnableChanged](subscriber).OnComponentEnableChanged(comp, enable)
		return true
	})
}

func HandleEventComponentEnableChanged(fun func(comp Component, enable bool)) EventComponentEnableChangedHandler {
	return EventComponentEnableChangedHandler(fun)
}

type EventComponentEnableChangedHandler func(comp Component, enable bool)

func (h EventComponentEnableChangedHandler) OnComponentEnableChanged(comp Component, enable bool) {
	h(comp, enable)
}

type iAutoEventComponentDestroySelf interface {
	EventComponentDestroySelf() event.IEvent
}

func BindEventComponentDestroySelf(auto iAutoEventComponentDestroySelf, subscriber EventComponentDestroySelf, priority ...int32) event.Hook {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	return event.Bind[EventComponentDestroySelf](auto.EventComponentDestroySelf(), subscriber, priority...)
}

func _EmitEventComponentDestroySelf(auto iAutoEventComponentDestroySelf, comp Component) {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(auto.EventComponentDestroySelf()).Emit(func(subscriber event.Cache) bool {
		event.Cache2Iface[EventComponentDestroySelf](subscriber).OnComponentDestroySelf(comp)
		return true
	})
}

func _EmitEventComponentDestroySelfWithInterrupt(auto iAutoEventComponentDestroySelf, interrupt func(comp Component) bool, comp Component) {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(auto.EventComponentDestroySelf()).Emit(func(subscriber event.Cache) bool {
		if interrupt != nil {
			if interrupt(comp) {
				return false
			}
		}
		event.Cache2Iface[EventComponentDestroySelf](subscriber).OnComponentDestroySelf(comp)
		return true
	})
}

func HandleEventComponentDestroySelf(fun func(comp Component)) EventComponentDestroySelfHandler {
	return EventComponentDestroySelfHandler(fun)
}

type EventComponentDestroySelfHandler func(comp Component)

func (h EventComponentDestroySelfHandler) OnComponentDestroySelf(comp Component) {
	h(comp)
}
