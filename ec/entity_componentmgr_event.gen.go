/*
 * This file is part of Golaxy Distributed Service Development Framework.
 *
 * Golaxy Distributed Service Development Framework is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * Golaxy Distributed Service Development Framework is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Golaxy Distributed Service Development Framework. If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright (c) 2024 pangdogs.
 */

// Code generated by eventc event; DO NOT EDIT.

package ec

import (
	event "git.golaxy.org/core/event"
)

type iAutoEventComponentMgrAddComponents interface {
	EventComponentMgrAddComponents() event.IEvent
}

func BindEventComponentMgrAddComponents(auto iAutoEventComponentMgrAddComponents, subscriber EventComponentMgrAddComponents, priority ...int32) event.Hook {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	return event.Bind[EventComponentMgrAddComponents](auto.EventComponentMgrAddComponents(), subscriber, priority...)
}

func _EmitEventComponentMgrAddComponents(auto iAutoEventComponentMgrAddComponents, entity Entity, components []Component) {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(auto.EventComponentMgrAddComponents()).Emit(func(subscriber event.Cache) bool {
		event.Cache2Iface[EventComponentMgrAddComponents](subscriber).OnComponentMgrAddComponents(entity, components)
		return true
	})
}

func _EmitEventComponentMgrAddComponentsWithInterrupt(auto iAutoEventComponentMgrAddComponents, interrupt func(entity Entity, components []Component) bool, entity Entity, components []Component) {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(auto.EventComponentMgrAddComponents()).Emit(func(subscriber event.Cache) bool {
		if interrupt != nil {
			if interrupt(entity, components) {
				return false
			}
		}
		event.Cache2Iface[EventComponentMgrAddComponents](subscriber).OnComponentMgrAddComponents(entity, components)
		return true
	})
}

func HandleEventComponentMgrAddComponents(fun func(entity Entity, components []Component)) EventComponentMgrAddComponentsHandler {
	return EventComponentMgrAddComponentsHandler(fun)
}

type EventComponentMgrAddComponentsHandler func(entity Entity, components []Component)

func (h EventComponentMgrAddComponentsHandler) OnComponentMgrAddComponents(entity Entity, components []Component) {
	h(entity, components)
}

type iAutoEventComponentMgrRemoveComponent interface {
	EventComponentMgrRemoveComponent() event.IEvent
}

func BindEventComponentMgrRemoveComponent(auto iAutoEventComponentMgrRemoveComponent, subscriber EventComponentMgrRemoveComponent, priority ...int32) event.Hook {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	return event.Bind[EventComponentMgrRemoveComponent](auto.EventComponentMgrRemoveComponent(), subscriber, priority...)
}

func _EmitEventComponentMgrRemoveComponent(auto iAutoEventComponentMgrRemoveComponent, entity Entity, component Component) {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(auto.EventComponentMgrRemoveComponent()).Emit(func(subscriber event.Cache) bool {
		event.Cache2Iface[EventComponentMgrRemoveComponent](subscriber).OnComponentMgrRemoveComponent(entity, component)
		return true
	})
}

func _EmitEventComponentMgrRemoveComponentWithInterrupt(auto iAutoEventComponentMgrRemoveComponent, interrupt func(entity Entity, component Component) bool, entity Entity, component Component) {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(auto.EventComponentMgrRemoveComponent()).Emit(func(subscriber event.Cache) bool {
		if interrupt != nil {
			if interrupt(entity, component) {
				return false
			}
		}
		event.Cache2Iface[EventComponentMgrRemoveComponent](subscriber).OnComponentMgrRemoveComponent(entity, component)
		return true
	})
}

func HandleEventComponentMgrRemoveComponent(fun func(entity Entity, component Component)) EventComponentMgrRemoveComponentHandler {
	return EventComponentMgrRemoveComponentHandler(fun)
}

type EventComponentMgrRemoveComponentHandler func(entity Entity, component Component)

func (h EventComponentMgrRemoveComponentHandler) OnComponentMgrRemoveComponent(entity Entity, component Component) {
	h(entity, component)
}

type iAutoEventComponentMgrFirstTouchComponent interface {
	EventComponentMgrFirstTouchComponent() event.IEvent
}

func BindEventComponentMgrFirstTouchComponent(auto iAutoEventComponentMgrFirstTouchComponent, subscriber EventComponentMgrFirstTouchComponent, priority ...int32) event.Hook {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	return event.Bind[EventComponentMgrFirstTouchComponent](auto.EventComponentMgrFirstTouchComponent(), subscriber, priority...)
}

func _EmitEventComponentMgrFirstTouchComponent(auto iAutoEventComponentMgrFirstTouchComponent, entity Entity, component Component) {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(auto.EventComponentMgrFirstTouchComponent()).Emit(func(subscriber event.Cache) bool {
		event.Cache2Iface[EventComponentMgrFirstTouchComponent](subscriber).OnComponentMgrFirstTouchComponent(entity, component)
		return true
	})
}

func _EmitEventComponentMgrFirstTouchComponentWithInterrupt(auto iAutoEventComponentMgrFirstTouchComponent, interrupt func(entity Entity, component Component) bool, entity Entity, component Component) {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(auto.EventComponentMgrFirstTouchComponent()).Emit(func(subscriber event.Cache) bool {
		if interrupt != nil {
			if interrupt(entity, component) {
				return false
			}
		}
		event.Cache2Iface[EventComponentMgrFirstTouchComponent](subscriber).OnComponentMgrFirstTouchComponent(entity, component)
		return true
	})
}

func HandleEventComponentMgrFirstTouchComponent(fun func(entity Entity, component Component)) EventComponentMgrFirstTouchComponentHandler {
	return EventComponentMgrFirstTouchComponentHandler(fun)
}

type EventComponentMgrFirstTouchComponentHandler func(entity Entity, component Component)

func (h EventComponentMgrFirstTouchComponentHandler) OnComponentMgrFirstTouchComponent(entity Entity, component Component) {
	h(entity, component)
}
