// Code generated by eventcode --decl_file=entity_componentmgr_event.go gen_event --package=ec; DO NOT EDIT.

package ec

import (
	"fmt"
	event "git.golaxy.org/core/event"
	iface "git.golaxy.org/core/util/iface"
)

type iAutoEventCompMgrAddComponents interface {
	EventCompMgrAddComponents() event.IEvent
}

func BindEventCompMgrAddComponents(auto iAutoEventCompMgrAddComponents, subscriber EventCompMgrAddComponents, priority ...int32) event.Hook {
	if auto == nil {
		panic(fmt.Errorf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs))
	}
	return event.BindEvent[EventCompMgrAddComponents](auto.EventCompMgrAddComponents(), subscriber, priority...)
}

func emitEventCompMgrAddComponents(auto iAutoEventCompMgrAddComponents, entity Entity, components []Component) {
	if auto == nil {
		panic(fmt.Errorf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs))
	}
	event.UnsafeEvent(auto.EventCompMgrAddComponents()).Emit(func(subscriber iface.Cache) bool {
		iface.Cache2Iface[EventCompMgrAddComponents](subscriber).OnCompMgrAddComponents(entity, components)
		return true
	})
}

type iAutoEventCompMgrRemoveComponent interface {
	EventCompMgrRemoveComponent() event.IEvent
}

func BindEventCompMgrRemoveComponent(auto iAutoEventCompMgrRemoveComponent, subscriber EventCompMgrRemoveComponent, priority ...int32) event.Hook {
	if auto == nil {
		panic(fmt.Errorf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs))
	}
	return event.BindEvent[EventCompMgrRemoveComponent](auto.EventCompMgrRemoveComponent(), subscriber, priority...)
}

func emitEventCompMgrRemoveComponent(auto iAutoEventCompMgrRemoveComponent, entity Entity, component Component) {
	if auto == nil {
		panic(fmt.Errorf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs))
	}
	event.UnsafeEvent(auto.EventCompMgrRemoveComponent()).Emit(func(subscriber iface.Cache) bool {
		iface.Cache2Iface[EventCompMgrRemoveComponent](subscriber).OnCompMgrRemoveComponent(entity, component)
		return true
	})
}

type iAutoEventCompMgrFirstAccessComponent interface {
	EventCompMgrFirstAccessComponent() event.IEvent
}

func BindEventCompMgrFirstAccessComponent(auto iAutoEventCompMgrFirstAccessComponent, subscriber EventCompMgrFirstAccessComponent, priority ...int32) event.Hook {
	if auto == nil {
		panic(fmt.Errorf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs))
	}
	return event.BindEvent[EventCompMgrFirstAccessComponent](auto.EventCompMgrFirstAccessComponent(), subscriber, priority...)
}

func emitEventCompMgrFirstAccessComponent(auto iAutoEventCompMgrFirstAccessComponent, entity Entity, component Component) {
	if auto == nil {
		panic(fmt.Errorf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs))
	}
	event.UnsafeEvent(auto.EventCompMgrFirstAccessComponent()).Emit(func(subscriber iface.Cache) bool {
		iface.Cache2Iface[EventCompMgrFirstAccessComponent](subscriber).OnCompMgrFirstAccessComponent(entity, component)
		return true
	})
}
