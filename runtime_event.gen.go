/*
 * This file is part of Golaxy Distributed Service Development Framework.
 *
 * Golaxy Distributed Service Development Framework is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * Golaxy Distributed Service Development Framework is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Golaxy Distributed Service Development Framework. If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright (c) 2024 pangdogs.
 */

// Code generated by eventc event --default_export=false --default_auto=false; DO NOT EDIT.

package core

import (
	event "git.golaxy.org/core/event"
	"git.golaxy.org/core/runtime"
)

func _EmitEventUpdate(evt event.IEvent) {
	if evt == nil {
		event.Panicf("%w: %w: evt is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(evt).Emit(func(subscriber event.Cache) bool {
		event.Cache2Iface[eventUpdate](subscriber).Update()
		return true
	})
}

func _EmitEventUpdateWithInterrupt(evt event.IEvent, interrupt func() bool) {
	if evt == nil {
		event.Panicf("%w: %w: evt is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(evt).Emit(func(subscriber event.Cache) bool {
		if interrupt != nil {
			if interrupt() {
				return false
			}
		}
		event.Cache2Iface[eventUpdate](subscriber).Update()
		return true
	})
}

func _HandleEventUpdate(fun func()) _EventUpdateHandler {
	return _EventUpdateHandler(fun)
}

type _EventUpdateHandler func()

func (h _EventUpdateHandler) Update() {
	h()
}

func _EmitEventLateUpdate(evt event.IEvent) {
	if evt == nil {
		event.Panicf("%w: %w: evt is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(evt).Emit(func(subscriber event.Cache) bool {
		event.Cache2Iface[eventLateUpdate](subscriber).LateUpdate()
		return true
	})
}

func _EmitEventLateUpdateWithInterrupt(evt event.IEvent, interrupt func() bool) {
	if evt == nil {
		event.Panicf("%w: %w: evt is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(evt).Emit(func(subscriber event.Cache) bool {
		if interrupt != nil {
			if interrupt() {
				return false
			}
		}
		event.Cache2Iface[eventLateUpdate](subscriber).LateUpdate()
		return true
	})
}

func _HandleEventLateUpdate(fun func()) _EventLateUpdateHandler {
	return _EventLateUpdateHandler(fun)
}

type _EventLateUpdateHandler func()

func (h _EventLateUpdateHandler) LateUpdate() {
	h()
}

func _EmitEventRuntimeRunningStatusChanged(evt event.IEvent, rtCtx runtime.Context, status runtime.RunningStatus, args ...any) {
	if evt == nil {
		event.Panicf("%w: %w: evt is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(evt).Emit(func(subscriber event.Cache) bool {
		event.Cache2Iface[eventRuntimeRunningStatusChanged](subscriber).OnRuntimeRunningStatusChanged(rtCtx, status, args)
		return true
	})
}

func _EmitEventRuntimeRunningStatusChangedWithInterrupt(evt event.IEvent, interrupt func(rtCtx runtime.Context, status runtime.RunningStatus, args ...any) bool, rtCtx runtime.Context, status runtime.RunningStatus, args ...any) {
	if evt == nil {
		event.Panicf("%w: %w: evt is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(evt).Emit(func(subscriber event.Cache) bool {
		if interrupt != nil {
			if interrupt(rtCtx, status, args) {
				return false
			}
		}
		event.Cache2Iface[eventRuntimeRunningStatusChanged](subscriber).OnRuntimeRunningStatusChanged(rtCtx, status, args)
		return true
	})
}

func _HandleEventRuntimeRunningStatusChanged(fun func(rtCtx runtime.Context, status runtime.RunningStatus, args ...any)) _EventRuntimeRunningStatusChangedHandler {
	return _EventRuntimeRunningStatusChangedHandler(fun)
}

type _EventRuntimeRunningStatusChangedHandler func(rtCtx runtime.Context, status runtime.RunningStatus, args ...any)

func (h _EventRuntimeRunningStatusChangedHandler) OnRuntimeRunningStatusChanged(rtCtx runtime.Context, status runtime.RunningStatus, args ...any) {
	h(rtCtx, status, args)
}
