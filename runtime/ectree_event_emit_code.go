// Code generated by eventcode --decl_file=ectree_event.go gen_emit --package=runtime --default_auto=true; DO NOT EDIT.

package runtime

import (
	"fmt"
	event "kit.golaxy.org/golaxy/event"
	iface "kit.golaxy.org/golaxy/util/iface"
	"kit.golaxy.org/golaxy/ec"
)

type iAutoEventECTreeAddChild interface {
	EventECTreeAddChild() event.IEvent
}

func BindEventECTreeAddChild(auto iAutoEventECTreeAddChild, delegate EventECTreeAddChild, priority ...int32) event.Hook {
	if auto == nil {
		panic(fmt.Errorf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs))
	}
	return event.BindEvent[EventECTreeAddChild](auto.EventECTreeAddChild(), delegate, priority...)
}

func emitEventECTreeAddChild(auto iAutoEventECTreeAddChild, ecTree IECTree, parent, child ec.Entity) {
	if auto == nil {
		panic(fmt.Errorf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs))
	}
	event.UnsafeEvent(auto.EventECTreeAddChild()).Emit(func(delegate iface.Cache) bool {
		iface.Cache2Iface[EventECTreeAddChild](delegate).OnAddChild(ecTree, parent, child)
		return true
	})
}

type iAutoEventECTreeRemoveChild interface {
	EventECTreeRemoveChild() event.IEvent
}

func BindEventECTreeRemoveChild(auto iAutoEventECTreeRemoveChild, delegate EventECTreeRemoveChild, priority ...int32) event.Hook {
	if auto == nil {
		panic(fmt.Errorf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs))
	}
	return event.BindEvent[EventECTreeRemoveChild](auto.EventECTreeRemoveChild(), delegate, priority...)
}

func emitEventECTreeRemoveChild(auto iAutoEventECTreeRemoveChild, ecTree IECTree, parent, child ec.Entity) {
	if auto == nil {
		panic(fmt.Errorf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs))
	}
	event.UnsafeEvent(auto.EventECTreeRemoveChild()).Emit(func(delegate iface.Cache) bool {
		iface.Cache2Iface[EventECTreeRemoveChild](delegate).OnRemoveChild(ecTree, parent, child)
		return true
	})
}
