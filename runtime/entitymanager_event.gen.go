/*
 * This file is part of Golaxy Distributed Service Development Framework.
 *
 * Golaxy Distributed Service Development Framework is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * Golaxy Distributed Service Development Framework is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Golaxy Distributed Service Development Framework. If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright (c) 2024 pangdogs.
 */

// Code generated by eventc event; DO NOT EDIT.

package runtime

import (
	event "git.golaxy.org/core/event"
	"git.golaxy.org/core/ec"
)

type iAutoEventEntityManagerAddEntity interface {
	EventEntityManagerAddEntity() event.IEvent
}

func BindEventEntityManagerAddEntity(auto iAutoEventEntityManagerAddEntity, subscriber EventEntityManagerAddEntity, priority ...int32) event.Hook {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	return event.Bind[EventEntityManagerAddEntity](auto.EventEntityManagerAddEntity(), subscriber, priority...)
}

func _EmitEventEntityManagerAddEntity(auto iAutoEventEntityManagerAddEntity, entityManager EntityManager, entity ec.Entity) {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(auto.EventEntityManagerAddEntity()).Emit(func(subscriber event.Cache) bool {
		event.Cache2Iface[EventEntityManagerAddEntity](subscriber).OnEntityManagerAddEntity(entityManager, entity)
		return true
	})
}

func _EmitEventEntityManagerAddEntityWithInterrupt(auto iAutoEventEntityManagerAddEntity, interrupt func(entityManager EntityManager, entity ec.Entity) bool, entityManager EntityManager, entity ec.Entity) {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(auto.EventEntityManagerAddEntity()).Emit(func(subscriber event.Cache) bool {
		if interrupt != nil {
			if interrupt(entityManager, entity) {
				return false
			}
		}
		event.Cache2Iface[EventEntityManagerAddEntity](subscriber).OnEntityManagerAddEntity(entityManager, entity)
		return true
	})
}

func HandleEventEntityManagerAddEntity(fun func(entityManager EntityManager, entity ec.Entity)) EventEntityManagerAddEntityHandler {
	return EventEntityManagerAddEntityHandler(fun)
}

type EventEntityManagerAddEntityHandler func(entityManager EntityManager, entity ec.Entity)

func (h EventEntityManagerAddEntityHandler) OnEntityManagerAddEntity(entityManager EntityManager, entity ec.Entity) {
	h(entityManager, entity)
}

type iAutoEventEntityManagerRemoveEntity interface {
	EventEntityManagerRemoveEntity() event.IEvent
}

func BindEventEntityManagerRemoveEntity(auto iAutoEventEntityManagerRemoveEntity, subscriber EventEntityManagerRemoveEntity, priority ...int32) event.Hook {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	return event.Bind[EventEntityManagerRemoveEntity](auto.EventEntityManagerRemoveEntity(), subscriber, priority...)
}

func _EmitEventEntityManagerRemoveEntity(auto iAutoEventEntityManagerRemoveEntity, entityManager EntityManager, entity ec.Entity) {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(auto.EventEntityManagerRemoveEntity()).Emit(func(subscriber event.Cache) bool {
		event.Cache2Iface[EventEntityManagerRemoveEntity](subscriber).OnEntityManagerRemoveEntity(entityManager, entity)
		return true
	})
}

func _EmitEventEntityManagerRemoveEntityWithInterrupt(auto iAutoEventEntityManagerRemoveEntity, interrupt func(entityManager EntityManager, entity ec.Entity) bool, entityManager EntityManager, entity ec.Entity) {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(auto.EventEntityManagerRemoveEntity()).Emit(func(subscriber event.Cache) bool {
		if interrupt != nil {
			if interrupt(entityManager, entity) {
				return false
			}
		}
		event.Cache2Iface[EventEntityManagerRemoveEntity](subscriber).OnEntityManagerRemoveEntity(entityManager, entity)
		return true
	})
}

func HandleEventEntityManagerRemoveEntity(fun func(entityManager EntityManager, entity ec.Entity)) EventEntityManagerRemoveEntityHandler {
	return EventEntityManagerRemoveEntityHandler(fun)
}

type EventEntityManagerRemoveEntityHandler func(entityManager EntityManager, entity ec.Entity)

func (h EventEntityManagerRemoveEntityHandler) OnEntityManagerRemoveEntity(entityManager EntityManager, entity ec.Entity) {
	h(entityManager, entity)
}

type iAutoEventEntityManagerEntityAddComponents interface {
	EventEntityManagerEntityAddComponents() event.IEvent
}

func BindEventEntityManagerEntityAddComponents(auto iAutoEventEntityManagerEntityAddComponents, subscriber EventEntityManagerEntityAddComponents, priority ...int32) event.Hook {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	return event.Bind[EventEntityManagerEntityAddComponents](auto.EventEntityManagerEntityAddComponents(), subscriber, priority...)
}

func _EmitEventEntityManagerEntityAddComponents(auto iAutoEventEntityManagerEntityAddComponents, entityManager EntityManager, entity ec.Entity, components []ec.Component) {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(auto.EventEntityManagerEntityAddComponents()).Emit(func(subscriber event.Cache) bool {
		event.Cache2Iface[EventEntityManagerEntityAddComponents](subscriber).OnEntityManagerEntityAddComponents(entityManager, entity, components)
		return true
	})
}

func _EmitEventEntityManagerEntityAddComponentsWithInterrupt(auto iAutoEventEntityManagerEntityAddComponents, interrupt func(entityManager EntityManager, entity ec.Entity, components []ec.Component) bool, entityManager EntityManager, entity ec.Entity, components []ec.Component) {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(auto.EventEntityManagerEntityAddComponents()).Emit(func(subscriber event.Cache) bool {
		if interrupt != nil {
			if interrupt(entityManager, entity, components) {
				return false
			}
		}
		event.Cache2Iface[EventEntityManagerEntityAddComponents](subscriber).OnEntityManagerEntityAddComponents(entityManager, entity, components)
		return true
	})
}

func HandleEventEntityManagerEntityAddComponents(fun func(entityManager EntityManager, entity ec.Entity, components []ec.Component)) EventEntityManagerEntityAddComponentsHandler {
	return EventEntityManagerEntityAddComponentsHandler(fun)
}

type EventEntityManagerEntityAddComponentsHandler func(entityManager EntityManager, entity ec.Entity, components []ec.Component)

func (h EventEntityManagerEntityAddComponentsHandler) OnEntityManagerEntityAddComponents(entityManager EntityManager, entity ec.Entity, components []ec.Component) {
	h(entityManager, entity, components)
}

type iAutoEventEntityManagerEntityRemoveComponent interface {
	EventEntityManagerEntityRemoveComponent() event.IEvent
}

func BindEventEntityManagerEntityRemoveComponent(auto iAutoEventEntityManagerEntityRemoveComponent, subscriber EventEntityManagerEntityRemoveComponent, priority ...int32) event.Hook {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	return event.Bind[EventEntityManagerEntityRemoveComponent](auto.EventEntityManagerEntityRemoveComponent(), subscriber, priority...)
}

func _EmitEventEntityManagerEntityRemoveComponent(auto iAutoEventEntityManagerEntityRemoveComponent, entityManager EntityManager, entity ec.Entity, component ec.Component) {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(auto.EventEntityManagerEntityRemoveComponent()).Emit(func(subscriber event.Cache) bool {
		event.Cache2Iface[EventEntityManagerEntityRemoveComponent](subscriber).OnEntityManagerEntityRemoveComponent(entityManager, entity, component)
		return true
	})
}

func _EmitEventEntityManagerEntityRemoveComponentWithInterrupt(auto iAutoEventEntityManagerEntityRemoveComponent, interrupt func(entityManager EntityManager, entity ec.Entity, component ec.Component) bool, entityManager EntityManager, entity ec.Entity, component ec.Component) {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(auto.EventEntityManagerEntityRemoveComponent()).Emit(func(subscriber event.Cache) bool {
		if interrupt != nil {
			if interrupt(entityManager, entity, component) {
				return false
			}
		}
		event.Cache2Iface[EventEntityManagerEntityRemoveComponent](subscriber).OnEntityManagerEntityRemoveComponent(entityManager, entity, component)
		return true
	})
}

func HandleEventEntityManagerEntityRemoveComponent(fun func(entityManager EntityManager, entity ec.Entity, component ec.Component)) EventEntityManagerEntityRemoveComponentHandler {
	return EventEntityManagerEntityRemoveComponentHandler(fun)
}

type EventEntityManagerEntityRemoveComponentHandler func(entityManager EntityManager, entity ec.Entity, component ec.Component)

func (h EventEntityManagerEntityRemoveComponentHandler) OnEntityManagerEntityRemoveComponent(entityManager EntityManager, entity ec.Entity, component ec.Component) {
	h(entityManager, entity, component)
}

type iAutoEventEntityManagerEntityFirstTouchComponent interface {
	EventEntityManagerEntityFirstTouchComponent() event.IEvent
}

func BindEventEntityManagerEntityFirstTouchComponent(auto iAutoEventEntityManagerEntityFirstTouchComponent, subscriber EventEntityManagerEntityFirstTouchComponent, priority ...int32) event.Hook {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	return event.Bind[EventEntityManagerEntityFirstTouchComponent](auto.EventEntityManagerEntityFirstTouchComponent(), subscriber, priority...)
}

func _EmitEventEntityManagerEntityFirstTouchComponent(auto iAutoEventEntityManagerEntityFirstTouchComponent, entityManager EntityManager, entity ec.Entity, component ec.Component) {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(auto.EventEntityManagerEntityFirstTouchComponent()).Emit(func(subscriber event.Cache) bool {
		event.Cache2Iface[EventEntityManagerEntityFirstTouchComponent](subscriber).OnEntityManagerEntityFirstTouchComponent(entityManager, entity, component)
		return true
	})
}

func _EmitEventEntityManagerEntityFirstTouchComponentWithInterrupt(auto iAutoEventEntityManagerEntityFirstTouchComponent, interrupt func(entityManager EntityManager, entity ec.Entity, component ec.Component) bool, entityManager EntityManager, entity ec.Entity, component ec.Component) {
	if auto == nil {
		event.Panicf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs)
	}
	event.UnsafeEvent(auto.EventEntityManagerEntityFirstTouchComponent()).Emit(func(subscriber event.Cache) bool {
		if interrupt != nil {
			if interrupt(entityManager, entity, component) {
				return false
			}
		}
		event.Cache2Iface[EventEntityManagerEntityFirstTouchComponent](subscriber).OnEntityManagerEntityFirstTouchComponent(entityManager, entity, component)
		return true
	})
}

func HandleEventEntityManagerEntityFirstTouchComponent(fun func(entityManager EntityManager, entity ec.Entity, component ec.Component)) EventEntityManagerEntityFirstTouchComponentHandler {
	return EventEntityManagerEntityFirstTouchComponentHandler(fun)
}

type EventEntityManagerEntityFirstTouchComponentHandler func(entityManager EntityManager, entity ec.Entity, component ec.Component)

func (h EventEntityManagerEntityFirstTouchComponentHandler) OnEntityManagerEntityFirstTouchComponent(entityManager EntityManager, entity ec.Entity, component ec.Component) {
	h(entityManager, entity, component)
}
