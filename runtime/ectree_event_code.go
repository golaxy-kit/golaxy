// Code generated by eventcode --decl_file=ectree_event.go gen_event --package=runtime; DO NOT EDIT.

package runtime

import (
	"fmt"
	event "git.golaxy.org/core/event"
	iface "git.golaxy.org/core/util/iface"
	"git.golaxy.org/core/ec"
)

type _AutoEventECTreeAddChild interface {
	EventECTreeAddChild() event.IEvent
}

func BindEventECTreeAddChild(auto _AutoEventECTreeAddChild, subscriber EventECTreeAddChild, priority ...int32) event.Hook {
	if auto == nil {
		panic(fmt.Errorf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs))
	}
	return event.BindEvent[EventECTreeAddChild](auto.EventECTreeAddChild(), subscriber, priority...)
}

func _EmitEventECTreeAddChild(auto _AutoEventECTreeAddChild, ecTree ECTree, parent, child ec.Entity) {
	if auto == nil {
		panic(fmt.Errorf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs))
	}
	event.UnsafeEvent(auto.EventECTreeAddChild()).Emit(func(subscriber iface.Cache) bool {
		iface.Cache2Iface[EventECTreeAddChild](subscriber).OnAddChild(ecTree, parent, child)
		return true
	})
}

func HandleEventECTreeAddChild(fun func(ecTree ECTree, parent, child ec.Entity)) EventECTreeAddChildHandler {
	return EventECTreeAddChildHandler(fun)
}

type EventECTreeAddChildHandler func(ecTree ECTree, parent, child ec.Entity)

func (h EventECTreeAddChildHandler) OnAddChild(ecTree ECTree, parent, child ec.Entity) {
	h(ecTree, parent, child)
}

type _AutoEventECTreeRemoveChild interface {
	EventECTreeRemoveChild() event.IEvent
}

func BindEventECTreeRemoveChild(auto _AutoEventECTreeRemoveChild, subscriber EventECTreeRemoveChild, priority ...int32) event.Hook {
	if auto == nil {
		panic(fmt.Errorf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs))
	}
	return event.BindEvent[EventECTreeRemoveChild](auto.EventECTreeRemoveChild(), subscriber, priority...)
}

func _EmitEventECTreeRemoveChild(auto _AutoEventECTreeRemoveChild, ecTree ECTree, parent, child ec.Entity) {
	if auto == nil {
		panic(fmt.Errorf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs))
	}
	event.UnsafeEvent(auto.EventECTreeRemoveChild()).Emit(func(subscriber iface.Cache) bool {
		iface.Cache2Iface[EventECTreeRemoveChild](subscriber).OnRemoveChild(ecTree, parent, child)
		return true
	})
}

func HandleEventECTreeRemoveChild(fun func(ecTree ECTree, parent, child ec.Entity)) EventECTreeRemoveChildHandler {
	return EventECTreeRemoveChildHandler(fun)
}

type EventECTreeRemoveChildHandler func(ecTree ECTree, parent, child ec.Entity)

func (h EventECTreeRemoveChildHandler) OnRemoveChild(ecTree ECTree, parent, child ec.Entity) {
	h(ecTree, parent, child)
}
